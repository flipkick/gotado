// Code generated by go-swagger; DO NOT EDIT.

package home

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new home API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for home API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	DeleteZoneOverlay(params *DeleteZoneOverlayParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteZoneOverlayNoContent, error)

	HomeState(params *HomeStateParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*HomeStateOK, error)

	ListMobileDevices(params *ListMobileDevicesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ListMobileDevicesOK, error)

	ListZones(params *ListZonesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ListZonesOK, error)

	ShowHome(params *ShowHomeParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ShowHomeOK, error)

	ShowUser(params *ShowUserParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ShowUserOK, error)

	ShowZoneCapabilities(params *ShowZoneCapabilitiesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ShowZoneCapabilitiesOK, error)

	ShowZoneDefaultOverlay(params *ShowZoneDefaultOverlayParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ShowZoneDefaultOverlayOK, error)

	ShowZoneDetails(params *ShowZoneDetailsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ShowZoneDetailsOK, error)

	ShowZoneOverlay(params *ShowZoneOverlayParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ShowZoneOverlayOK, error)

	ShowZoneState(params *ShowZoneStateParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ShowZoneStateOK, error)

	UpdatePresenceLock(params *UpdatePresenceLockParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdatePresenceLockOK, error)

	UpdateZoneOverlay(params *UpdateZoneOverlayParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateZoneOverlayOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  DeleteZoneOverlay deletes an overlay

  This will delete the overlay for the specified zone of a home.
*/
func (a *Client) DeleteZoneOverlay(params *DeleteZoneOverlayParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteZoneOverlayNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteZoneOverlayParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "deleteZoneOverlay",
		Method:             "DELETE",
		PathPattern:        "/homes/{home_id}/zones/{zone_id}/overlay",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteZoneOverlayReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteZoneOverlayNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteZoneOverlay: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  HomeState gets state of home

  This will the current presence state of the home (HOME/AWAY).
*/
func (a *Client) HomeState(params *HomeStateParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*HomeStateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewHomeStateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "homeState",
		Method:             "GET",
		PathPattern:        "/homes/{home_id}/state",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &HomeStateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*HomeStateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for homeState: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ListMobileDevices lists all mobile devices associated with this home
*/
func (a *Client) ListMobileDevices(params *ListMobileDevicesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ListMobileDevicesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListMobileDevicesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "listMobileDevices",
		Method:             "GET",
		PathPattern:        "/homes/{home_id}/mobileDevices",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ListMobileDevicesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListMobileDevicesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for listMobileDevices: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ListZones lists all zones of a home

  This will return a list of zones that are associated with a home.
*/
func (a *Client) ListZones(params *ListZonesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ListZonesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListZonesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "listZones",
		Method:             "GET",
		PathPattern:        "/homes/{home_id}/zones",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ListZonesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListZonesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for listZones: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ShowHome details about a specific home

  This will return the details of the specified home.
*/
func (a *Client) ShowHome(params *ShowHomeParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ShowHomeOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewShowHomeParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "showHome",
		Method:             "GET",
		PathPattern:        "/homes/{home_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ShowHomeReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ShowHomeOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for showHome: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ShowUser details about the currently logged in user

  This will return details about the currently logged in user.
*/
func (a *Client) ShowUser(params *ShowUserParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ShowUserOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewShowUserParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "showUser",
		Method:             "GET",
		PathPattern:        "/me",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ShowUserReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ShowUserOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for showUser: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ShowZoneCapabilities capabilities of a zone

  This will return the capabilities of the specified zone.
*/
func (a *Client) ShowZoneCapabilities(params *ShowZoneCapabilitiesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ShowZoneCapabilitiesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewShowZoneCapabilitiesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "showZoneCapabilities",
		Method:             "GET",
		PathPattern:        "/homes/{home_id}/zones/{zone_id}/capabilities",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ShowZoneCapabilitiesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ShowZoneCapabilitiesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for showZoneCapabilities: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ShowZoneDefaultOverlay preferences for default overlay if an overlay is created without a termination condition e g through the device UI the given termination condition is taken for this overlay
*/
func (a *Client) ShowZoneDefaultOverlay(params *ShowZoneDefaultOverlayParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ShowZoneDefaultOverlayOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewShowZoneDefaultOverlayParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "showZoneDefaultOverlay",
		Method:             "GET",
		PathPattern:        "/homes/{home_id}/zones/{zone_id}/defaultOverlay",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ShowZoneDefaultOverlayReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ShowZoneDefaultOverlayOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for showZoneDefaultOverlay: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ShowZoneDetails details of a zone
*/
func (a *Client) ShowZoneDetails(params *ShowZoneDetailsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ShowZoneDetailsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewShowZoneDetailsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "showZoneDetails",
		Method:             "GET",
		PathPattern:        "/homes/{home_id}/zones/{zone_id}/details",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ShowZoneDetailsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ShowZoneDetailsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for showZoneDetails: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ShowZoneOverlay overlays of a zone

  This will return the current overlay of the specified zone.
*/
func (a *Client) ShowZoneOverlay(params *ShowZoneOverlayParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ShowZoneOverlayOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewShowZoneOverlayParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "showZoneOverlay",
		Method:             "GET",
		PathPattern:        "/homes/{home_id}/zones/{zone_id}/overlay",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ShowZoneOverlayReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ShowZoneOverlayOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for showZoneOverlay: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ShowZoneState states of a zone

  This will return the current state of the specified zone.
*/
func (a *Client) ShowZoneState(params *ShowZoneStateParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ShowZoneStateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewShowZoneStateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "showZoneState",
		Method:             "GET",
		PathPattern:        "/homes/{home_id}/zones/{zone_id}/state",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ShowZoneStateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ShowZoneStateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for showZoneState: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  UpdatePresenceLock sets a presence lock state i e h o m e or a w a y

  This will set the presence mode of the home
*/
func (a *Client) UpdatePresenceLock(params *UpdatePresenceLockParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdatePresenceLockOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdatePresenceLockParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "updatePresenceLock",
		Method:             "PUT",
		PathPattern:        "/homes/{home_id}/presenceLock",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdatePresenceLockReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdatePresenceLockOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updatePresenceLock: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  UpdateZoneOverlay sets a new overlay

  This will set the overlay for the specified zone of a home.
*/
func (a *Client) UpdateZoneOverlay(params *UpdateZoneOverlayParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateZoneOverlayOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateZoneOverlayParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "updateZoneOverlay",
		Method:             "PUT",
		PathPattern:        "/homes/{home_id}/zones/{zone_id}/overlay",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateZoneOverlayReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateZoneOverlayOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updateZoneOverlay: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
