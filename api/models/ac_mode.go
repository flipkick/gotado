// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// AcMode Cooling system mode.
//
// swagger:model AcMode
type AcMode string

func NewAcMode(value AcMode) *AcMode {
	v := value
	return &v
}

const (

	// AcModeCOOL captures enum value "COOL"
	AcModeCOOL AcMode = "COOL"

	// AcModeHEAT captures enum value "HEAT"
	AcModeHEAT AcMode = "HEAT"

	// AcModeDRY captures enum value "DRY"
	AcModeDRY AcMode = "DRY"

	// AcModeFAN captures enum value "FAN"
	AcModeFAN AcMode = "FAN"

	// AcModeAUTO captures enum value "AUTO"
	AcModeAUTO AcMode = "AUTO"
)

// for schema
var acModeEnum []interface{}

func init() {
	var res []AcMode
	if err := json.Unmarshal([]byte(`["COOL","HEAT","DRY","FAN","AUTO"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		acModeEnum = append(acModeEnum, v)
	}
}

func (m AcMode) validateAcModeEnum(path, location string, value AcMode) error {
	if err := validate.EnumCase(path, location, value, acModeEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this ac mode
func (m AcMode) Validate(_ strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateAcModeEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this ac mode based on context it is used
func (m AcMode) ContextValidate(_ context.Context, _ strfmt.Registry) error {
	return nil
}
