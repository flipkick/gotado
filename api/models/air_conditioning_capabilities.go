// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"bytes"
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// AirConditioningCapabilities air conditioning capabilities
//
// swagger:model AirConditioningCapabilities
type AirConditioningCapabilities struct {

	// a u t o
	AUTO *AcModeCapabilities `json:"AUTO,omitempty"`

	// c o o l
	COOL *AcModeCapabilities `json:"COOL,omitempty"`

	// d r y
	DRY *AcModeCapabilities `json:"DRY,omitempty"`

	// f a n
	FAN *AcModeCapabilities `json:"FAN,omitempty"`

	// h e a t
	HEAT *AcModeCapabilities `json:"HEAT,omitempty"`
}

// Type gets the type of this subtype
func (m *AirConditioningCapabilities) Type() TadoSystemType {
	return "AirConditioningCapabilities"
}

// SetType sets the type of this subtype
func (m *AirConditioningCapabilities) SetType(val TadoSystemType) {
}

// UnmarshalJSON unmarshals this object with a polymorphic type from a JSON structure
func (m *AirConditioningCapabilities) UnmarshalJSON(raw []byte) error {
	var data struct {

		// a u t o
		AUTO *AcModeCapabilities `json:"AUTO,omitempty"`

		// c o o l
		COOL *AcModeCapabilities `json:"COOL,omitempty"`

		// d r y
		DRY *AcModeCapabilities `json:"DRY,omitempty"`

		// f a n
		FAN *AcModeCapabilities `json:"FAN,omitempty"`

		// h e a t
		HEAT *AcModeCapabilities `json:"HEAT,omitempty"`
	}
	buf := bytes.NewBuffer(raw)
	dec := json.NewDecoder(buf)
	dec.UseNumber()

	if err := dec.Decode(&data); err != nil {
		return err
	}

	var base struct {
		/* Just the base type fields. Used for unmashalling polymorphic types.*/

		Type TadoSystemType `json:"type"`
	}
	buf = bytes.NewBuffer(raw)
	dec = json.NewDecoder(buf)
	dec.UseNumber()

	if err := dec.Decode(&base); err != nil {
		return err
	}

	var result AirConditioningCapabilities

	if base.Type != result.Type() {
		/* Not the type we're looking for. */
		return errors.New(422, "invalid type value: %q", base.Type)
	}

	result.AUTO = data.AUTO
	result.COOL = data.COOL
	result.DRY = data.DRY
	result.FAN = data.FAN
	result.HEAT = data.HEAT

	*m = result

	return nil
}

// MarshalJSON marshals this object with a polymorphic type to a JSON structure
func (m AirConditioningCapabilities) MarshalJSON() ([]byte, error) {
	var b1, b2, b3 []byte
	var err error
	b1, err = json.Marshal(struct {

		// a u t o
		AUTO *AcModeCapabilities `json:"AUTO,omitempty"`

		// c o o l
		COOL *AcModeCapabilities `json:"COOL,omitempty"`

		// d r y
		DRY *AcModeCapabilities `json:"DRY,omitempty"`

		// f a n
		FAN *AcModeCapabilities `json:"FAN,omitempty"`

		// h e a t
		HEAT *AcModeCapabilities `json:"HEAT,omitempty"`
	}{

		AUTO: m.AUTO,

		COOL: m.COOL,

		DRY: m.DRY,

		FAN: m.FAN,

		HEAT: m.HEAT,
	})
	if err != nil {
		return nil, err
	}
	b2, err = json.Marshal(struct {
		Type TadoSystemType `json:"type"`
	}{

		Type: m.Type(),
	})
	if err != nil {
		return nil, err
	}

	return swag.ConcatJSON(b1, b2, b3), nil
}

// Validate validates this air conditioning capabilities
func (m *AirConditioningCapabilities) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAUTO(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCOOL(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDRY(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFAN(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateHEAT(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AirConditioningCapabilities) validateAUTO(formats strfmt.Registry) error {

	if swag.IsZero(m.AUTO) { // not required
		return nil
	}

	if m.AUTO != nil {
		if err := m.AUTO.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("AUTO")
			}
			return err
		}
	}

	return nil
}

func (m *AirConditioningCapabilities) validateCOOL(formats strfmt.Registry) error {

	if swag.IsZero(m.COOL) { // not required
		return nil
	}

	if m.COOL != nil {
		if err := m.COOL.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("COOL")
			}
			return err
		}
	}

	return nil
}

func (m *AirConditioningCapabilities) validateDRY(formats strfmt.Registry) error {

	if swag.IsZero(m.DRY) { // not required
		return nil
	}

	if m.DRY != nil {
		if err := m.DRY.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("DRY")
			}
			return err
		}
	}

	return nil
}

func (m *AirConditioningCapabilities) validateFAN(formats strfmt.Registry) error {

	if swag.IsZero(m.FAN) { // not required
		return nil
	}

	if m.FAN != nil {
		if err := m.FAN.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("FAN")
			}
			return err
		}
	}

	return nil
}

func (m *AirConditioningCapabilities) validateHEAT(formats strfmt.Registry) error {

	if swag.IsZero(m.HEAT) { // not required
		return nil
	}

	if m.HEAT != nil {
		if err := m.HEAT.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("HEAT")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this air conditioning capabilities based on the context it is used
func (m *AirConditioningCapabilities) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAUTO(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateCOOL(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateDRY(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateFAN(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateHEAT(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AirConditioningCapabilities) contextValidateType(ctx context.Context, formats strfmt.Registry) error {

	if err := m.Type().ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("type")
		}
		return err
	}

	return nil
}

func (m *AirConditioningCapabilities) contextValidateAUTO(ctx context.Context, formats strfmt.Registry) error {

	if m.AUTO != nil {
		if err := m.AUTO.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("AUTO")
			}
			return err
		}
	}

	return nil
}

func (m *AirConditioningCapabilities) contextValidateCOOL(ctx context.Context, formats strfmt.Registry) error {

	if m.COOL != nil {
		if err := m.COOL.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("COOL")
			}
			return err
		}
	}

	return nil
}

func (m *AirConditioningCapabilities) contextValidateDRY(ctx context.Context, formats strfmt.Registry) error {

	if m.DRY != nil {
		if err := m.DRY.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("DRY")
			}
			return err
		}
	}

	return nil
}

func (m *AirConditioningCapabilities) contextValidateFAN(ctx context.Context, formats strfmt.Registry) error {

	if m.FAN != nil {
		if err := m.FAN.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("FAN")
			}
			return err
		}
	}

	return nil
}

func (m *AirConditioningCapabilities) contextValidateHEAT(ctx context.Context, formats strfmt.Registry) error {

	if m.HEAT != nil {
		if err := m.HEAT.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("HEAT")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *AirConditioningCapabilities) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *AirConditioningCapabilities) UnmarshalBinary(b []byte) error {
	var res AirConditioningCapabilities
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
