// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ControlDevice A Tado control device.
//
// swagger:model ControlDevice
type ControlDevice struct {

	// The state of the device battery (if applicable).
	// Read Only: true
	BatteryState string `json:"batteryState,omitempty"`

	// The type of Tado control device.
	// Required: true
	// Read Only: true
	DeviceType string `json:"deviceType"`

	// The serial number of the device.
	// Required: true
	// Read Only: true
	SerialNo string `json:"serialNo"`
}

// Validate validates this control device
func (m *ControlDevice) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDeviceType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSerialNo(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ControlDevice) validateDeviceType(formats strfmt.Registry) error {

	if err := validate.RequiredString("deviceType", "body", m.DeviceType); err != nil {
		return err
	}

	return nil
}

func (m *ControlDevice) validateSerialNo(formats strfmt.Registry) error {

	if err := validate.RequiredString("serialNo", "body", m.SerialNo); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this control device based on the context it is used
func (m *ControlDevice) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateBatteryState(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateDeviceType(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSerialNo(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ControlDevice) contextValidateBatteryState(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "batteryState", "body", string(m.BatteryState)); err != nil {
		return err
	}

	return nil
}

func (m *ControlDevice) contextValidateDeviceType(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "deviceType", "body", string(m.DeviceType)); err != nil {
		return err
	}

	return nil
}

func (m *ControlDevice) contextValidateSerialNo(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "serialNo", "body", string(m.SerialNo)); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ControlDevice) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ControlDevice) UnmarshalBinary(b []byte) error {
	var res ControlDevice
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
