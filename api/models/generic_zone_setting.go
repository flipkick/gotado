// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"bytes"
	"context"
	"encoding/json"
	"io"
	"io/ioutil"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// GenericZoneSetting generic zone setting
//
// swagger:discriminator GenericZoneSetting type
type GenericZoneSetting interface {
	runtime.Validatable
	runtime.ContextValidatable

	// type
	// Required: true
	Type() TadoSystemType
	SetType(TadoSystemType)

	// AdditionalProperties in base type shoud be handled just like regular properties
	// At this moment, the base type property is pushed down to the subtype
}

type genericZoneSetting struct {
	typeField TadoSystemType
}

// Type gets the type of this polymorphic type
func (m *genericZoneSetting) Type() TadoSystemType {
	return "GenericZoneSetting"
}

// SetType sets the type of this polymorphic type
func (m *genericZoneSetting) SetType(val TadoSystemType) {
}

// UnmarshalGenericZoneSettingSlice unmarshals polymorphic slices of GenericZoneSetting
func UnmarshalGenericZoneSettingSlice(reader io.Reader, consumer runtime.Consumer) ([]GenericZoneSetting, error) {
	var elements []json.RawMessage
	if err := consumer.Consume(reader, &elements); err != nil {
		return nil, err
	}

	var result []GenericZoneSetting
	for _, element := range elements {
		obj, err := unmarshalGenericZoneSetting(element, consumer)
		if err != nil {
			return nil, err
		}
		result = append(result, obj)
	}
	return result, nil
}

// UnmarshalGenericZoneSetting unmarshals polymorphic GenericZoneSetting
func UnmarshalGenericZoneSetting(reader io.Reader, consumer runtime.Consumer) (GenericZoneSetting, error) {
	// we need to read this twice, so first into a buffer
	data, err := ioutil.ReadAll(reader)
	if err != nil {
		return nil, err
	}
	return unmarshalGenericZoneSetting(data, consumer)
}

func unmarshalGenericZoneSetting(data []byte, consumer runtime.Consumer) (GenericZoneSetting, error) {
	buf := bytes.NewBuffer(data)
	buf2 := bytes.NewBuffer(data)

	// the first time this is read is to fetch the value of the type property.
	var getType struct {
		Type string `json:"type"`
	}
	if err := consumer.Consume(buf, &getType); err != nil {
		return nil, err
	}

	if err := validate.RequiredString("type", "body", getType.Type); err != nil {
		return nil, err
	}

	// The value of type is used to determine which type to create and unmarshal the data into
	switch getType.Type {
	case "CoolingZoneSetting":
		var result CoolingZoneSetting
		if err := consumer.Consume(buf2, &result); err != nil {
			return nil, err
		}
		return &result, nil
	case "GenericZoneSetting":
		var result genericZoneSetting
		if err := consumer.Consume(buf2, &result); err != nil {
			return nil, err
		}
		return &result, nil
	case "HeatingZoneSetting":
		var result HeatingZoneSetting
		if err := consumer.Consume(buf2, &result); err != nil {
			return nil, err
		}
		return &result, nil
	case "HotWaterZoneSetting":
		var result HotWaterZoneSetting
		if err := consumer.Consume(buf2, &result); err != nil {
			return nil, err
		}
		return &result, nil
	}
	return nil, errors.New(422, "invalid type value: %q", getType.Type)
}

// Validate validates this generic zone setting
func (m *genericZoneSetting) Validate(formats strfmt.Registry) error {
	var res []error

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validate this generic zone setting based on the context it is used
func (m *genericZoneSetting) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateType(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *genericZoneSetting) contextValidateType(ctx context.Context, formats strfmt.Registry) error {

	if err := m.Type().ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("type")
		}
		return err
	}

	return nil
}
