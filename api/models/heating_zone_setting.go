// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"bytes"
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// HeatingZoneSetting heating zone setting
//
// swagger:model HeatingZoneSetting
type HeatingZoneSetting struct {

	// Whether the heating should be ON or OFF.
	// Required: true
	Power *Power `json:"power"`

	// The desired temperature, if power is `ON`.
	Temperature *TemperatureObject `json:"temperature,omitempty"`
}

// Type gets the type of this subtype
func (m *HeatingZoneSetting) Type() TadoSystemType {
	return "HeatingZoneSetting"
}

// SetType sets the type of this subtype
func (m *HeatingZoneSetting) SetType(_ TadoSystemType) {
}

// UnmarshalJSON unmarshals this object with a polymorphic type from a JSON structure
func (m *HeatingZoneSetting) UnmarshalJSON(raw []byte) error {
	var data struct {

		// Whether the heating should be ON or OFF.
		// Required: true
		Power *Power `json:"power"`

		// The desired temperature, if power is `ON`.
		Temperature *TemperatureObject `json:"temperature,omitempty"`
	}
	buf := bytes.NewBuffer(raw)
	dec := json.NewDecoder(buf)
	dec.UseNumber()

	if err := dec.Decode(&data); err != nil {
		return err
	}

	var base struct {
		/* Just the base type fields. Used for unmashalling polymorphic types.*/

		Type TadoSystemType `json:"type"`
	}
	buf = bytes.NewBuffer(raw)
	dec = json.NewDecoder(buf)
	dec.UseNumber()

	if err := dec.Decode(&base); err != nil {
		return err
	}

	var result HeatingZoneSetting

	if base.Type != result.Type() {
		/* Not the type we're looking for. */
		return errors.New(422, "invalid type value: %q", base.Type)
	}

	result.Power = data.Power
	result.Temperature = data.Temperature

	*m = result

	return nil
}

// MarshalJSON marshals this object with a polymorphic type to a JSON structure
func (m HeatingZoneSetting) MarshalJSON() ([]byte, error) {
	var b1, b2, b3 []byte
	var err error
	b1, err = json.Marshal(struct {

		// Whether the heating should be ON or OFF.
		// Required: true
		Power *Power `json:"power"`

		// The desired temperature, if power is `ON`.
		Temperature *TemperatureObject `json:"temperature,omitempty"`
	}{

		Power: m.Power,

		Temperature: m.Temperature,
	})
	if err != nil {
		return nil, err
	}
	b2, err = json.Marshal(struct {
		Type TadoSystemType `json:"type"`
	}{

		Type: m.Type(),
	})
	if err != nil {
		return nil, err
	}

	return swag.ConcatJSON(b1, b2, b3), nil
}

// Validate validates this heating zone setting
func (m *HeatingZoneSetting) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validatePower(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTemperature(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *HeatingZoneSetting) validatePower(formats strfmt.Registry) error {

	if err := validate.Required("power", "body", m.Power); err != nil {
		return err
	}

	if err := validate.Required("power", "body", m.Power); err != nil {
		return err
	}

	if m.Power != nil {
		if err := m.Power.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("power")
			}
			return err
		}
	}

	return nil
}

func (m *HeatingZoneSetting) validateTemperature(formats strfmt.Registry) error {

	if swag.IsZero(m.Temperature) { // not required
		return nil
	}

	if m.Temperature != nil {
		if err := m.Temperature.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("temperature")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this heating zone setting based on the context it is used
func (m *HeatingZoneSetting) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidatePower(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTemperature(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *HeatingZoneSetting) contextValidateType(ctx context.Context, formats strfmt.Registry) error {

	if err := m.Type().ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("type")
		}
		return err
	}

	return nil
}

func (m *HeatingZoneSetting) contextValidatePower(ctx context.Context, formats strfmt.Registry) error {

	if m.Power != nil {
		if err := m.Power.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("power")
			}
			return err
		}
	}

	return nil
}

func (m *HeatingZoneSetting) contextValidateTemperature(ctx context.Context, formats strfmt.Registry) error {

	if m.Temperature != nil {
		if err := m.Temperature.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("temperature")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *HeatingZoneSetting) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *HeatingZoneSetting) UnmarshalBinary(b []byte) error {
	var res HeatingZoneSetting
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
