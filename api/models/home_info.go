// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// HomeInfo home info
//
// swagger:model HomeInfo
type HomeInfo struct {

	// Distance from home geolocation at which user geolocation is considered away
	// Required: true
	AwayRadiusInMeters *float64 `json:"awayRadiusInMeters"`

	// Time zone ID of the home time zone.
	// Required: true
	DateTimeZone *string `json:"dateTimeZone"`

	// The geolocation of this home. Absent, if the OAuth scope `home.contact:read` is not granted.
	Geolocation *Geolocation `json:"geolocation,omitempty"`

	// ID of the home.
	// Required: true
	ID *int32 `json:"id"`

	// User defined name for the home.
	// Required: true
	Name *string `json:"name"`

	// The preferred temperature unit of the home.
	// Required: true
	TemperatureUnit *TemperatureUnit `json:"temperatureUnit"`
}

// Validate validates this home info
func (m *HomeInfo) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAwayRadiusInMeters(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDateTimeZone(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateGeolocation(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTemperatureUnit(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *HomeInfo) validateAwayRadiusInMeters(formats strfmt.Registry) error {

	if err := validate.Required("awayRadiusInMeters", "body", m.AwayRadiusInMeters); err != nil {
		return err
	}

	return nil
}

func (m *HomeInfo) validateDateTimeZone(formats strfmt.Registry) error {

	if err := validate.Required("dateTimeZone", "body", m.DateTimeZone); err != nil {
		return err
	}

	return nil
}

func (m *HomeInfo) validateGeolocation(formats strfmt.Registry) error {
	if swag.IsZero(m.Geolocation) { // not required
		return nil
	}

	if m.Geolocation != nil {
		if err := m.Geolocation.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("geolocation")
			}
			return err
		}
	}

	return nil
}

func (m *HomeInfo) validateID(formats strfmt.Registry) error {

	if err := validate.Required("id", "body", m.ID); err != nil {
		return err
	}

	return nil
}

func (m *HomeInfo) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

func (m *HomeInfo) validateTemperatureUnit(formats strfmt.Registry) error {

	if err := validate.Required("temperatureUnit", "body", m.TemperatureUnit); err != nil {
		return err
	}

	if err := validate.Required("temperatureUnit", "body", m.TemperatureUnit); err != nil {
		return err
	}

	if m.TemperatureUnit != nil {
		if err := m.TemperatureUnit.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("temperatureUnit")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this home info based on the context it is used
func (m *HomeInfo) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateGeolocation(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTemperatureUnit(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *HomeInfo) contextValidateGeolocation(ctx context.Context, formats strfmt.Registry) error {

	if m.Geolocation != nil {
		if err := m.Geolocation.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("geolocation")
			}
			return err
		}
	}

	return nil
}

func (m *HomeInfo) contextValidateTemperatureUnit(ctx context.Context, formats strfmt.Registry) error {

	if m.TemperatureUnit != nil {
		if err := m.TemperatureUnit.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("temperatureUnit")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *HomeInfo) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *HomeInfo) UnmarshalBinary(b []byte) error {
	var res HomeInfo
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
