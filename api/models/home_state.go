// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// HomeState home state
//
// swagger:model HomeState
type HomeState struct {

	// User defined name for the home.
	// Read Only: true
	Name string `json:"name,omitempty"`

	// Presence State.
	// Required: true
	Presence *PresenceState `json:"presence"`

	// Not sure what this does..
	// Required: true
	// Read Only: true
	PresenceLocked bool `json:"presenceLocked"`

	// Not sure what this does..
	// Read Only: true
	ShowHomePresenceSwitchButton *bool `json:"showHomePresenceSwitchButton,omitempty"`
}

// Validate validates this home state
func (m *HomeState) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validatePresence(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePresenceLocked(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *HomeState) validatePresence(formats strfmt.Registry) error {

	if err := validate.Required("presence", "body", m.Presence); err != nil {
		return err
	}

	if err := validate.Required("presence", "body", m.Presence); err != nil {
		return err
	}

	if m.Presence != nil {
		if err := m.Presence.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("presence")
			}
			return err
		}
	}

	return nil
}

func (m *HomeState) validatePresenceLocked(formats strfmt.Registry) error {

	if err := validate.Required("presenceLocked", "body", bool(m.PresenceLocked)); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this home state based on the context it is used
func (m *HomeState) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateName(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePresence(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePresenceLocked(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateShowHomePresenceSwitchButton(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *HomeState) contextValidateName(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "name", "body", string(m.Name)); err != nil {
		return err
	}

	return nil
}

func (m *HomeState) contextValidatePresence(ctx context.Context, formats strfmt.Registry) error {

	if m.Presence != nil {
		if err := m.Presence.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("presence")
			}
			return err
		}
	}

	return nil
}

func (m *HomeState) contextValidatePresenceLocked(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "presenceLocked", "body", bool(m.PresenceLocked)); err != nil {
		return err
	}

	return nil
}

func (m *HomeState) contextValidateShowHomePresenceSwitchButton(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "showHomePresenceSwitchButton", "body", m.ShowHomePresenceSwitchButton); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *HomeState) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *HomeState) UnmarshalBinary(b []byte) error {
	var res HomeState
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
