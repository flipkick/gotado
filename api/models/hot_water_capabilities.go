// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"bytes"
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// HotWaterCapabilities hot water capabilities
//
// swagger:model HotWaterCapabilities
type HotWaterCapabilities struct {

	// True if hot water zone can set temperature, false otherwise.
	// Required: true
	CanSetTemperature *bool `json:"canSetTemperature"`

	// Temperature range of hot water zone. Only set if `canSetTemperature` is `true`.
	Temperatures *TemperatureRange `json:"temperatures,omitempty"`
}

// Type gets the type of this subtype
func (m *HotWaterCapabilities) Type() TadoSystemType {
	return "HotWaterCapabilities"
}

// SetType sets the type of this subtype
func (m *HotWaterCapabilities) SetType(val TadoSystemType) {
}

// UnmarshalJSON unmarshals this object with a polymorphic type from a JSON structure
func (m *HotWaterCapabilities) UnmarshalJSON(raw []byte) error {
	var data struct {

		// True if hot water zone can set temperature, false otherwise.
		// Required: true
		CanSetTemperature *bool `json:"canSetTemperature"`

		// Temperature range of hot water zone. Only set if `canSetTemperature` is `true`.
		Temperatures *TemperatureRange `json:"temperatures,omitempty"`
	}
	buf := bytes.NewBuffer(raw)
	dec := json.NewDecoder(buf)
	dec.UseNumber()

	if err := dec.Decode(&data); err != nil {
		return err
	}

	var base struct {
		/* Just the base type fields. Used for unmashalling polymorphic types.*/

		Type TadoSystemType `json:"type"`
	}
	buf = bytes.NewBuffer(raw)
	dec = json.NewDecoder(buf)
	dec.UseNumber()

	if err := dec.Decode(&base); err != nil {
		return err
	}

	var result HotWaterCapabilities

	if base.Type != result.Type() {
		/* Not the type we're looking for. */
		return errors.New(422, "invalid type value: %q", base.Type)
	}

	result.CanSetTemperature = data.CanSetTemperature
	result.Temperatures = data.Temperatures

	*m = result

	return nil
}

// MarshalJSON marshals this object with a polymorphic type to a JSON structure
func (m HotWaterCapabilities) MarshalJSON() ([]byte, error) {
	var b1, b2, b3 []byte
	var err error
	b1, err = json.Marshal(struct {

		// True if hot water zone can set temperature, false otherwise.
		// Required: true
		CanSetTemperature *bool `json:"canSetTemperature"`

		// Temperature range of hot water zone. Only set if `canSetTemperature` is `true`.
		Temperatures *TemperatureRange `json:"temperatures,omitempty"`
	}{

		CanSetTemperature: m.CanSetTemperature,

		Temperatures: m.Temperatures,
	})
	if err != nil {
		return nil, err
	}
	b2, err = json.Marshal(struct {
		Type TadoSystemType `json:"type"`
	}{

		Type: m.Type(),
	})
	if err != nil {
		return nil, err
	}

	return swag.ConcatJSON(b1, b2, b3), nil
}

// Validate validates this hot water capabilities
func (m *HotWaterCapabilities) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCanSetTemperature(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTemperatures(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *HotWaterCapabilities) validateCanSetTemperature(formats strfmt.Registry) error {

	if err := validate.Required("canSetTemperature", "body", m.CanSetTemperature); err != nil {
		return err
	}

	return nil
}

func (m *HotWaterCapabilities) validateTemperatures(formats strfmt.Registry) error {

	if swag.IsZero(m.Temperatures) { // not required
		return nil
	}

	if m.Temperatures != nil {
		if err := m.Temperatures.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("temperatures")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this hot water capabilities based on the context it is used
func (m *HotWaterCapabilities) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateTemperatures(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *HotWaterCapabilities) contextValidateType(ctx context.Context, formats strfmt.Registry) error {

	if err := m.Type().ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("type")
		}
		return err
	}

	return nil
}

func (m *HotWaterCapabilities) contextValidateTemperatures(ctx context.Context, formats strfmt.Registry) error {

	if m.Temperatures != nil {
		if err := m.Temperatures.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("temperatures")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *HotWaterCapabilities) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *HotWaterCapabilities) UnmarshalBinary(b []byte) error {
	var res HotWaterCapabilities
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
