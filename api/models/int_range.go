// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// IntRange int range
//
// swagger:model IntRange
type IntRange struct {

	// Maximum range value.
	// Required: true
	Max *int64 `json:"max"`

	// Minimum range value.
	// Required: true
	Min *int64 `json:"min"`

	// Step size between min and max.
	// Required: true
	Step *float32 `json:"step"`
}

// Validate validates this int range
func (m *IntRange) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateMax(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMin(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStep(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *IntRange) validateMax(_ strfmt.Registry) error {

	if err := validate.Required("max", "body", m.Max); err != nil {
		return err
	}

	return nil
}

func (m *IntRange) validateMin(_ strfmt.Registry) error {

	if err := validate.Required("min", "body", m.Min); err != nil {
		return err
	}

	return nil
}

func (m *IntRange) validateStep(_ strfmt.Registry) error {

	if err := validate.Required("step", "body", m.Step); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this int range based on context it is used
func (m *IntRange) ContextValidate(_ context.Context, _ strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *IntRange) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *IntRange) UnmarshalBinary(b []byte) error {
	var res IntRange
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
