// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// MobileDeviceLocation mobile device location
//
// swagger:model MobileDeviceLocation
type MobileDeviceLocation struct {

	// Whether the mobile device, based on the last reported geolocation is within the home fence (which by default is 400m, but can be configured per home).
	// Required: true
	AtHome *bool `json:"atHome"`

	// Whether the last received geolocation of the device is older than 48h (though this depends on a configuration per mobile device).
	// Required: true
	Stale *bool `json:"stale"`
}

// Validate validates this mobile device location
func (m *MobileDeviceLocation) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAtHome(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStale(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *MobileDeviceLocation) validateAtHome(_ strfmt.Registry) error {

	if err := validate.Required("atHome", "body", m.AtHome); err != nil {
		return err
	}

	return nil
}

func (m *MobileDeviceLocation) validateStale(_ strfmt.Registry) error {

	if err := validate.Required("stale", "body", m.Stale); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this mobile device location based on context it is used
func (m *MobileDeviceLocation) ContextValidate(_ context.Context, _ strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *MobileDeviceLocation) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *MobileDeviceLocation) UnmarshalBinary(b []byte) error {
	var res MobileDeviceLocation
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
