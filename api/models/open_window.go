// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// OpenWindow The open window expires at a certain point in time (or when ignored).
//
// swagger:model OpenWindow
type OpenWindow struct {

	// The number of seconds that the open window should last/was configured to last.
	// Minimum: 0
	DurationInSeconds *int64 `json:"durationInSeconds,omitempty"`

	// ISO8601 datetime, e.g. `2015-09-28T15:03:20Z` with second precision.
	// Format: date-time
	Expiry strfmt.DateTime `json:"expiry,omitempty"`

	// The number of seconds that are remaining of the open window at the time that the response is assembled by the server.
	// Minimum: 0
	RemainingTimeInSeconds *int64 `json:"remainingTimeInSeconds,omitempty"`
}

// Validate validates this open window
func (m *OpenWindow) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDurationInSeconds(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateExpiry(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRemainingTimeInSeconds(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *OpenWindow) validateDurationInSeconds(_ strfmt.Registry) error {
	if swag.IsZero(m.DurationInSeconds) { // not required
		return nil
	}

	if err := validate.MinimumInt("durationInSeconds", "body", *m.DurationInSeconds, 0, false); err != nil {
		return err
	}

	return nil
}

func (m *OpenWindow) validateExpiry(formats strfmt.Registry) error {
	if swag.IsZero(m.Expiry) { // not required
		return nil
	}

	if err := validate.FormatOf("expiry", "body", "date-time", m.Expiry.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *OpenWindow) validateRemainingTimeInSeconds(_ strfmt.Registry) error {
	if swag.IsZero(m.RemainingTimeInSeconds) { // not required
		return nil
	}

	if err := validate.MinimumInt("remainingTimeInSeconds", "body", *m.RemainingTimeInSeconds, 0, false); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this open window based on context it is used
func (m *OpenWindow) ContextValidate(_ context.Context, _ strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *OpenWindow) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *OpenWindow) UnmarshalBinary(b []byte) error {
	var res OpenWindow
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
