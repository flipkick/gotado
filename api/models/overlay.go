// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"bytes"
	"context"
	"encoding/json"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Overlay overlay
//
// swagger:model Overlay
type Overlay struct {
	settingField GenericZoneSetting

	terminationField OverlayTerminationCondition
}

// Setting gets the setting of this base type
func (m *Overlay) Setting() GenericZoneSetting {
	return m.settingField
}

// SetSetting sets the setting of this base type
func (m *Overlay) SetSetting(val GenericZoneSetting) {
	m.settingField = val
}

// Termination gets the termination of this base type
func (m *Overlay) Termination() OverlayTerminationCondition {
	return m.terminationField
}

// SetTermination sets the termination of this base type
func (m *Overlay) SetTermination(val OverlayTerminationCondition) {
	m.terminationField = val
}

// UnmarshalJSON unmarshals this object with a polymorphic type from a JSON structure
func (m *Overlay) UnmarshalJSON(raw []byte) error {
	var data struct {
		Setting json.RawMessage `json:"setting"`

		Termination json.RawMessage `json:"termination,omitempty"`
	}
	buf := bytes.NewBuffer(raw)
	dec := json.NewDecoder(buf)
	dec.UseNumber()

	if err := dec.Decode(&data); err != nil {
		return err
	}

	propSetting, err := UnmarshalGenericZoneSetting(bytes.NewBuffer(data.Setting), runtime.JSONConsumer())
	if err != nil && err != io.EOF {
		return err
	}
	var propTermination OverlayTerminationCondition
	if string(data.Termination) != "null" {
		termination, err := UnmarshalOverlayTerminationCondition(bytes.NewBuffer(data.Termination), runtime.JSONConsumer())
		if err != nil && err != io.EOF {
			return err
		}
		propTermination = termination
	}

	var result Overlay

	// setting
	result.settingField = propSetting

	// termination
	result.terminationField = propTermination

	*m = result

	return nil
}

// MarshalJSON marshals this object with a polymorphic type to a JSON structure
func (m Overlay) MarshalJSON() ([]byte, error) {
	var b1, b2, b3 []byte
	var err error
	b1, err = json.Marshal(struct {
	}{})
	if err != nil {
		return nil, err
	}
	b2, err = json.Marshal(struct {
		Setting GenericZoneSetting `json:"setting"`

		Termination OverlayTerminationCondition `json:"termination,omitempty"`
	}{

		Setting: m.settingField,

		Termination: m.terminationField,
	})
	if err != nil {
		return nil, err
	}

	return swag.ConcatJSON(b1, b2, b3), nil
}

// Validate validates this overlay
func (m *Overlay) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateSetting(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTermination(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Overlay) validateSetting(formats strfmt.Registry) error {

	if err := validate.Required("setting", "body", m.Setting()); err != nil {
		return err
	}

	if err := m.Setting().Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("setting")
		}
		return err
	}

	return nil
}

func (m *Overlay) validateTermination(formats strfmt.Registry) error {
	if swag.IsZero(m.Termination()) { // not required
		return nil
	}

	if err := m.Termination().Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("termination")
		}
		return err
	}

	return nil
}

// ContextValidate validate this overlay based on the context it is used
func (m *Overlay) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateSetting(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTermination(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Overlay) contextValidateSetting(ctx context.Context, formats strfmt.Registry) error {

	if err := m.Setting().ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("setting")
		}
		return err
	}

	return nil
}

func (m *Overlay) contextValidateTermination(ctx context.Context, formats strfmt.Registry) error {

	if err := m.Termination().ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("termination")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Overlay) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Overlay) UnmarshalBinary(b []byte) error {
	var res Overlay
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
