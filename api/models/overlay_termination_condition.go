// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"bytes"
	"context"
	"encoding/json"
	"io"
	"io/ioutil"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// OverlayTerminationCondition overlay termination condition
//
// swagger:discriminator OverlayTerminationCondition type
type OverlayTerminationCondition interface {
	runtime.Validatable
	runtime.ContextValidatable

	// [ISO8601 datetime](https://en.wikipedia.org/wiki/ISO_8601). E.g. `2015-09-28T15:03:20Z` with second precision.
	// Only relevant when receiving an overlay, ignored when overlay is sent to the server. Indicates the expected time of
	// termination for this overlay, if no app user moves. `null` means that the overlay never expires (by itself, unless manully removed).
	//
	// Read Only: true
	// Format: date-time
	ProjectedExpiry() strfmt.DateTime
	SetProjectedExpiry(strfmt.DateTime)

	// type
	// Required: true
	Type() OverlayTerminationConditionType
	SetType(OverlayTerminationConditionType)

	// AdditionalProperties in base type shoud be handled just like regular properties
	// At this moment, the base type property is pushed down to the subtype
}

type overlayTerminationCondition struct {
	projectedExpiryField strfmt.DateTime

	typeField OverlayTerminationConditionType
}

// ProjectedExpiry gets the projected expiry of this polymorphic type
func (m *overlayTerminationCondition) ProjectedExpiry() strfmt.DateTime {
	return m.projectedExpiryField
}

// SetProjectedExpiry sets the projected expiry of this polymorphic type
func (m *overlayTerminationCondition) SetProjectedExpiry(val strfmt.DateTime) {
	m.projectedExpiryField = val
}

// Type gets the type of this polymorphic type
func (m *overlayTerminationCondition) Type() OverlayTerminationConditionType {
	return "OverlayTerminationCondition"
}

// SetType sets the type of this polymorphic type
func (m *overlayTerminationCondition) SetType(_ OverlayTerminationConditionType) {
}

// UnmarshalOverlayTerminationConditionSlice unmarshals polymorphic slices of OverlayTerminationCondition
func UnmarshalOverlayTerminationConditionSlice(reader io.Reader, consumer runtime.Consumer) ([]OverlayTerminationCondition, error) {
	var elements []json.RawMessage
	if err := consumer.Consume(reader, &elements); err != nil {
		return nil, err
	}

	var result []OverlayTerminationCondition
	for _, element := range elements {
		obj, err := unmarshalOverlayTerminationCondition(element, consumer)
		if err != nil {
			return nil, err
		}
		result = append(result, obj)
	}
	return result, nil
}

// UnmarshalOverlayTerminationCondition unmarshals polymorphic OverlayTerminationCondition
func UnmarshalOverlayTerminationCondition(reader io.Reader, consumer runtime.Consumer) (OverlayTerminationCondition, error) {
	// we need to read this twice, so first into a buffer
	data, err := ioutil.ReadAll(reader)
	if err != nil {
		return nil, err
	}
	return unmarshalOverlayTerminationCondition(data, consumer)
}

func unmarshalOverlayTerminationCondition(data []byte, consumer runtime.Consumer) (OverlayTerminationCondition, error) {
	buf := bytes.NewBuffer(data)
	buf2 := bytes.NewBuffer(data)

	// the first time this is read is to fetch the value of the type property.
	var getType struct {
		Type string `json:"type"`
	}
	if err := consumer.Consume(buf, &getType); err != nil {
		return nil, err
	}

	if err := validate.RequiredString("type", "body", getType.Type); err != nil {
		return nil, err
	}

	// The value of type is used to determine which type to create and unmarshal the data into
	switch getType.Type {
	case "ManualTerminationCondition":
		var result ManualTerminationCondition
		if err := consumer.Consume(buf2, &result); err != nil {
			return nil, err
		}
		return &result, nil
	case "OverlayTerminationCondition":
		var result overlayTerminationCondition
		if err := consumer.Consume(buf2, &result); err != nil {
			return nil, err
		}
		return &result, nil
	case "TadoModeTerminationCondition":
		var result TadoModeTerminationCondition
		if err := consumer.Consume(buf2, &result); err != nil {
			return nil, err
		}
		return &result, nil
	case "TimerTerminationCondition":
		var result TimerTerminationCondition
		if err := consumer.Consume(buf2, &result); err != nil {
			return nil, err
		}
		return &result, nil
	}
	return nil, errors.New(422, "invalid type value: %q", getType.Type)
}

// Validate validates this overlay termination condition
func (m *overlayTerminationCondition) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateProjectedExpiry(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *overlayTerminationCondition) validateProjectedExpiry(formats strfmt.Registry) error {
	if swag.IsZero(m.ProjectedExpiry()) { // not required
		return nil
	}

	if err := validate.FormatOf("projectedExpiry", "body", "date-time", m.ProjectedExpiry().String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this overlay termination condition based on the context it is used
func (m *overlayTerminationCondition) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateProjectedExpiry(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateType(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *overlayTerminationCondition) contextValidateProjectedExpiry(ctx context.Context, _ strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "projectedExpiry", "body", strfmt.DateTime(m.ProjectedExpiry())); err != nil {
		return err
	}

	return nil
}

func (m *overlayTerminationCondition) contextValidateType(ctx context.Context, formats strfmt.Registry) error {

	if err := m.Type().ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("type")
		}
		return err
	}

	return nil
}
