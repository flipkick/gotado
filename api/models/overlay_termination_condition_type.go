// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// OverlayTerminationConditionType When the overlay terminates.
// `MANUAL`: only when manually removed,
// `TADO_MODE`: when the current tado mode or the block schedule setting changes,
// `TIMER`: at a fixed point in time.
//
//
// swagger:model OverlayTerminationConditionType
type OverlayTerminationConditionType string

func NewOverlayTerminationConditionType(value OverlayTerminationConditionType) *OverlayTerminationConditionType {
	v := value
	return &v
}

const (

	// OverlayTerminationConditionTypeMANUAL captures enum value "MANUAL"
	OverlayTerminationConditionTypeMANUAL OverlayTerminationConditionType = "MANUAL"

	// OverlayTerminationConditionTypeTADOMODE captures enum value "TADO_MODE"
	OverlayTerminationConditionTypeTADOMODE OverlayTerminationConditionType = "TADO_MODE"

	// OverlayTerminationConditionTypeTIMER captures enum value "TIMER"
	OverlayTerminationConditionTypeTIMER OverlayTerminationConditionType = "TIMER"
)

// for schema
var overlayTerminationConditionTypeEnum []interface{}

func init() {
	var res []OverlayTerminationConditionType
	if err := json.Unmarshal([]byte(`["MANUAL","TADO_MODE","TIMER"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		overlayTerminationConditionTypeEnum = append(overlayTerminationConditionTypeEnum, v)
	}
}

func (m OverlayTerminationConditionType) validateOverlayTerminationConditionTypeEnum(path, location string, value OverlayTerminationConditionType) error {
	if err := validate.EnumCase(path, location, value, overlayTerminationConditionTypeEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this overlay termination condition type
func (m OverlayTerminationConditionType) Validate(_ strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateOverlayTerminationConditionTypeEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this overlay termination condition type based on context it is used
func (m OverlayTerminationConditionType) ContextValidate(_ context.Context, _ strfmt.Registry) error {
	return nil
}
