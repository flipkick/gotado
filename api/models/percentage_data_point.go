// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// PercentageDataPoint percentage data point
//
// swagger:model PercentageDataPoint
type PercentageDataPoint struct {

	// Relative value (0-100)
	// Required: true
	// Maximum: 100
	// Minimum: 0
	Percentage *float32 `json:"percentage"`

	// Measurement timestamp
	// Required: true
	// Format: date-time
	Timestamp *strfmt.DateTime `json:"timestamp"`
}

// Validate validates this percentage data point
func (m *PercentageDataPoint) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validatePercentage(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTimestamp(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PercentageDataPoint) validatePercentage(_ strfmt.Registry) error {

	if err := validate.Required("percentage", "body", m.Percentage); err != nil {
		return err
	}

	if err := validate.Minimum("percentage", "body", float64(*m.Percentage), 0, false); err != nil {
		return err
	}

	if err := validate.Maximum("percentage", "body", float64(*m.Percentage), 100, false); err != nil {
		return err
	}

	return nil
}

func (m *PercentageDataPoint) validateTimestamp(formats strfmt.Registry) error {

	if err := validate.Required("timestamp", "body", m.Timestamp); err != nil {
		return err
	}

	if err := validate.FormatOf("timestamp", "body", "date-time", m.Timestamp.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this percentage data point based on context it is used
func (m *PercentageDataPoint) ContextValidate(_ context.Context, _ strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *PercentageDataPoint) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PercentageDataPoint) UnmarshalBinary(b []byte) error {
	var res PercentageDataPoint
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
