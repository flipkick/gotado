// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// Power General use enum to indicate on/off state.
//
// swagger:model Power
type Power string

func NewPower(value Power) *Power {
	v := value
	return &v
}

const (

	// PowerON captures enum value "ON"
	PowerON Power = "ON"

	// PowerOFF captures enum value "OFF"
	PowerOFF Power = "OFF"
)

// for schema
var powerEnum []interface{}

func init() {
	var res []Power
	if err := json.Unmarshal([]byte(`["ON","OFF"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		powerEnum = append(powerEnum, v)
	}
}

func (m Power) validatePowerEnum(path, location string, value Power) error {
	if err := validate.EnumCase(path, location, value, powerEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this power
func (m Power) Validate(_ strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validatePowerEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this power based on context it is used
func (m Power) ContextValidate(_ context.Context, _ strfmt.Registry) error {
	return nil
}
