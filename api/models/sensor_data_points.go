// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// SensorDataPoints sensor data points
//
// swagger:model SensorDataPoints
type SensorDataPoints struct {

	// humidity
	Humidity *PercentageDataPoint `json:"humidity,omitempty"`

	// inside temperature
	InsideTemperature *TemperatureDataPoint `json:"insideTemperature,omitempty"`
}

// Validate validates this sensor data points
func (m *SensorDataPoints) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateHumidity(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateInsideTemperature(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SensorDataPoints) validateHumidity(formats strfmt.Registry) error {
	if swag.IsZero(m.Humidity) { // not required
		return nil
	}

	if m.Humidity != nil {
		if err := m.Humidity.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("humidity")
			}
			return err
		}
	}

	return nil
}

func (m *SensorDataPoints) validateInsideTemperature(formats strfmt.Registry) error {
	if swag.IsZero(m.InsideTemperature) { // not required
		return nil
	}

	if m.InsideTemperature != nil {
		if err := m.InsideTemperature.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("insideTemperature")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this sensor data points based on the context it is used
func (m *SensorDataPoints) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateHumidity(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateInsideTemperature(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SensorDataPoints) contextValidateHumidity(ctx context.Context, formats strfmt.Registry) error {

	if m.Humidity != nil {
		if err := m.Humidity.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("humidity")
			}
			return err
		}
	}

	return nil
}

func (m *SensorDataPoints) contextValidateInsideTemperature(ctx context.Context, formats strfmt.Registry) error {

	if m.InsideTemperature != nil {
		if err := m.InsideTemperature.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("insideTemperature")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *SensorDataPoints) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SensorDataPoints) UnmarshalBinary(b []byte) error {
	var res SensorDataPoints
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
