// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// TadoMode tado mode
//
// swagger:model TadoMode
type TadoMode string

func NewTadoMode(value TadoMode) *TadoMode {
	v := value
	return &v
}

const (

	// TadoModeHOME captures enum value "HOME"
	TadoModeHOME TadoMode = "HOME"

	// TadoModeSLEEP captures enum value "SLEEP"
	TadoModeSLEEP TadoMode = "SLEEP"

	// TadoModeAWAY captures enum value "AWAY"
	TadoModeAWAY TadoMode = "AWAY"
)

// for schema
var tadoModeEnum []interface{}

func init() {
	var res []TadoMode
	if err := json.Unmarshal([]byte(`["HOME","SLEEP","AWAY"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		tadoModeEnum = append(tadoModeEnum, v)
	}
}

func (m TadoMode) validateTadoModeEnum(path, location string, value TadoMode) error {
	if err := validate.EnumCase(path, location, value, tadoModeEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this tado mode
func (m TadoMode) Validate(_ strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateTadoModeEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this tado mode based on context it is used
func (m TadoMode) ContextValidate(_ context.Context, _ strfmt.Registry) error {
	return nil
}
