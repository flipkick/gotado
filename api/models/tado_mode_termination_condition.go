// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"bytes"
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// TadoModeTerminationCondition The overlay terminates when the tado mode changes or when the setting (power, temperature, ...) of the underlying block schedule changes (or when removed manually).
//
// swagger:model TadoModeTerminationCondition
type TadoModeTerminationCondition struct {
	projectedExpiryField strfmt.DateTime
}

// ProjectedExpiry gets the projected expiry of this subtype
func (m *TadoModeTerminationCondition) ProjectedExpiry() strfmt.DateTime {
	return m.projectedExpiryField
}

// SetProjectedExpiry sets the projected expiry of this subtype
func (m *TadoModeTerminationCondition) SetProjectedExpiry(val strfmt.DateTime) {
	m.projectedExpiryField = val
}

// Type gets the type of this subtype
func (m *TadoModeTerminationCondition) Type() OverlayTerminationConditionType {
	return "TadoModeTerminationCondition"
}

// SetType sets the type of this subtype
func (m *TadoModeTerminationCondition) SetType(_ OverlayTerminationConditionType) {
}

// UnmarshalJSON unmarshals this object with a polymorphic type from a JSON structure
func (m *TadoModeTerminationCondition) UnmarshalJSON(raw []byte) error {
	var data struct {
	}
	buf := bytes.NewBuffer(raw)
	dec := json.NewDecoder(buf)
	dec.UseNumber()

	if err := dec.Decode(&data); err != nil {
		return err
	}

	var base struct {
		/* Just the base type fields. Used for unmashalling polymorphic types.*/

		ProjectedExpiry strfmt.DateTime `json:"projectedExpiry,omitempty"`

		Type OverlayTerminationConditionType `json:"type"`
	}
	buf = bytes.NewBuffer(raw)
	dec = json.NewDecoder(buf)
	dec.UseNumber()

	if err := dec.Decode(&base); err != nil {
		return err
	}

	var result TadoModeTerminationCondition

	result.projectedExpiryField = base.ProjectedExpiry

	if base.Type != result.Type() {
		/* Not the type we're looking for. */
		return errors.New(422, "invalid type value: %q", base.Type)
	}

	*m = result

	return nil
}

// MarshalJSON marshals this object with a polymorphic type to a JSON structure
func (m TadoModeTerminationCondition) MarshalJSON() ([]byte, error) {
	var b1, b2, b3 []byte
	var err error
	b1, err = json.Marshal(struct {
	}{})
	if err != nil {
		return nil, err
	}
	b2, err = json.Marshal(struct {
		ProjectedExpiry strfmt.DateTime `json:"projectedExpiry,omitempty"`

		Type OverlayTerminationConditionType `json:"type"`
	}{

		ProjectedExpiry: m.ProjectedExpiry(),

		Type: m.Type(),
	})
	if err != nil {
		return nil, err
	}

	return swag.ConcatJSON(b1, b2, b3), nil
}

// Validate validates this tado mode termination condition
func (m *TadoModeTerminationCondition) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateProjectedExpiry(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *TadoModeTerminationCondition) validateProjectedExpiry(formats strfmt.Registry) error {

	if swag.IsZero(m.ProjectedExpiry()) { // not required
		return nil
	}

	if err := validate.FormatOf("projectedExpiry", "body", "date-time", m.ProjectedExpiry().String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this tado mode termination condition based on the context it is used
func (m *TadoModeTerminationCondition) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateProjectedExpiry(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *TadoModeTerminationCondition) contextValidateProjectedExpiry(ctx context.Context, _ strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "projectedExpiry", "body", strfmt.DateTime(m.ProjectedExpiry())); err != nil {
		return err
	}

	return nil
}

func (m *TadoModeTerminationCondition) contextValidateType(ctx context.Context, formats strfmt.Registry) error {

	if err := m.Type().ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("type")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *TadoModeTerminationCondition) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *TadoModeTerminationCondition) UnmarshalBinary(b []byte) error {
	var res TadoModeTerminationCondition
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
