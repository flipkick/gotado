// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// TadoSystemType The system type of the zone.
//
// swagger:model TadoSystemType
type TadoSystemType string

func NewTadoSystemType(value TadoSystemType) *TadoSystemType {
	v := value
	return &v
}

const (

	// TadoSystemTypeHEATING captures enum value "HEATING"
	TadoSystemTypeHEATING TadoSystemType = "HEATING"

	// TadoSystemTypeAIRCONDITIONING captures enum value "AIR_CONDITIONING"
	TadoSystemTypeAIRCONDITIONING TadoSystemType = "AIR_CONDITIONING"

	// TadoSystemTypeHOTWATER captures enum value "HOT_WATER"
	TadoSystemTypeHOTWATER TadoSystemType = "HOT_WATER"
)

// for schema
var tadoSystemTypeEnum []interface{}

func init() {
	var res []TadoSystemType
	if err := json.Unmarshal([]byte(`["HEATING","AIR_CONDITIONING","HOT_WATER"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		tadoSystemTypeEnum = append(tadoSystemTypeEnum, v)
	}
}

func (m TadoSystemType) validateTadoSystemTypeEnum(path, location string, value TadoSystemType) error {
	if err := validate.EnumCase(path, location, value, tadoSystemTypeEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this tado system type
func (m TadoSystemType) Validate(_ strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateTadoSystemTypeEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validate this tado system type based on the context it is used
func (m TadoSystemType) ContextValidate(ctx context.Context, _ strfmt.Registry) error {
	var res []error

	if err := validate.ReadOnly(ctx, "", "body", TadoSystemType(m)); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
