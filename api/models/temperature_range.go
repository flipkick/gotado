// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// TemperatureRange temperature range
//
// swagger:model TemperatureRange
type TemperatureRange struct {

	// celsius
	Celsius *IntRange `json:"celsius,omitempty"`

	// fahrenheit
	Fahrenheit *IntRange `json:"fahrenheit,omitempty"`
}

// Validate validates this temperature range
func (m *TemperatureRange) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCelsius(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFahrenheit(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *TemperatureRange) validateCelsius(formats strfmt.Registry) error {
	if swag.IsZero(m.Celsius) { // not required
		return nil
	}

	if m.Celsius != nil {
		if err := m.Celsius.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("celsius")
			}
			return err
		}
	}

	return nil
}

func (m *TemperatureRange) validateFahrenheit(formats strfmt.Registry) error {
	if swag.IsZero(m.Fahrenheit) { // not required
		return nil
	}

	if m.Fahrenheit != nil {
		if err := m.Fahrenheit.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("fahrenheit")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this temperature range based on the context it is used
func (m *TemperatureRange) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateCelsius(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateFahrenheit(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *TemperatureRange) contextValidateCelsius(ctx context.Context, formats strfmt.Registry) error {

	if m.Celsius != nil {
		if err := m.Celsius.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("celsius")
			}
			return err
		}
	}

	return nil
}

func (m *TemperatureRange) contextValidateFahrenheit(ctx context.Context, formats strfmt.Registry) error {

	if m.Fahrenheit != nil {
		if err := m.Fahrenheit.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("fahrenheit")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *TemperatureRange) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *TemperatureRange) UnmarshalBinary(b []byte) error {
	var res TemperatureRange
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
