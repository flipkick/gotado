// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// TemperatureUnit temperature unit
//
// swagger:model TemperatureUnit
type TemperatureUnit string

func NewTemperatureUnit(value TemperatureUnit) *TemperatureUnit {
	v := value
	return &v
}

const (

	// TemperatureUnitCELSIUS captures enum value "CELSIUS"
	TemperatureUnitCELSIUS TemperatureUnit = "CELSIUS"

	// TemperatureUnitFAHRENHEIT captures enum value "FAHRENHEIT"
	TemperatureUnitFAHRENHEIT TemperatureUnit = "FAHRENHEIT"
)

// for schema
var temperatureUnitEnum []interface{}

func init() {
	var res []TemperatureUnit
	if err := json.Unmarshal([]byte(`["CELSIUS","FAHRENHEIT"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		temperatureUnitEnum = append(temperatureUnitEnum, v)
	}
}

func (m TemperatureUnit) validateTemperatureUnitEnum(path, location string, value TemperatureUnit) error {
	if err := validate.EnumCase(path, location, value, temperatureUnitEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this temperature unit
func (m TemperatureUnit) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateTemperatureUnitEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this temperature unit based on context it is used
func (m TemperatureUnit) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
