// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"bytes"
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// TimerTerminationCondition The overlay terminates at a certain point in time (or when removed manually).
//
// swagger:model TimerTerminationCondition
type TimerTerminationCondition struct {
	projectedExpiryField strfmt.DateTime

	// The number of seconds that the overlay should last/was configured to last.
	// Required: true
	// Minimum: 0
	DurationInSeconds *int64 `json:"durationInSeconds"`

	// [ISO8601 datetime](https://en.wikipedia.org/wiki/ISO_8601). E.g.: `2015-09-28T15:03:20Z` with second precision.
	// Only relevant when receiving an overlay, ignored when overlay is sent to the server.
	//
	// Read Only: true
	// Format: date-time
	Expiry strfmt.DateTime `json:"expiry,omitempty"`

	// The number of seconds that are remaining of the timer overlay at the time that the response is assembled by the server.
	// Minimum: 0
	RemainingTimeInSeconds *int64 `json:"remainingTimeInSeconds,omitempty"`
}

// ProjectedExpiry gets the projected expiry of this subtype
func (m *TimerTerminationCondition) ProjectedExpiry() strfmt.DateTime {
	return m.projectedExpiryField
}

// SetProjectedExpiry sets the projected expiry of this subtype
func (m *TimerTerminationCondition) SetProjectedExpiry(val strfmt.DateTime) {
	m.projectedExpiryField = val
}

// Type gets the type of this subtype
func (m *TimerTerminationCondition) Type() OverlayTerminationConditionType {
	return "TimerTerminationCondition"
}

// SetType sets the type of this subtype
func (m *TimerTerminationCondition) SetType(val OverlayTerminationConditionType) {
}

// UnmarshalJSON unmarshals this object with a polymorphic type from a JSON structure
func (m *TimerTerminationCondition) UnmarshalJSON(raw []byte) error {
	var data struct {

		// The number of seconds that the overlay should last/was configured to last.
		// Required: true
		// Minimum: 0
		DurationInSeconds *int64 `json:"durationInSeconds"`

		// [ISO8601 datetime](https://en.wikipedia.org/wiki/ISO_8601). E.g.: `2015-09-28T15:03:20Z` with second precision.
		// Only relevant when receiving an overlay, ignored when overlay is sent to the server.
		//
		// Read Only: true
		// Format: date-time
		Expiry strfmt.DateTime `json:"expiry,omitempty"`

		// The number of seconds that are remaining of the timer overlay at the time that the response is assembled by the server.
		// Minimum: 0
		RemainingTimeInSeconds *int64 `json:"remainingTimeInSeconds,omitempty"`
	}
	buf := bytes.NewBuffer(raw)
	dec := json.NewDecoder(buf)
	dec.UseNumber()

	if err := dec.Decode(&data); err != nil {
		return err
	}

	var base struct {
		/* Just the base type fields. Used for unmashalling polymorphic types.*/

		ProjectedExpiry strfmt.DateTime `json:"projectedExpiry,omitempty"`

		Type OverlayTerminationConditionType `json:"type"`
	}
	buf = bytes.NewBuffer(raw)
	dec = json.NewDecoder(buf)
	dec.UseNumber()

	if err := dec.Decode(&base); err != nil {
		return err
	}

	var result TimerTerminationCondition

	result.projectedExpiryField = base.ProjectedExpiry

	if base.Type != result.Type() {
		/* Not the type we're looking for. */
		return errors.New(422, "invalid type value: %q", base.Type)
	}

	result.DurationInSeconds = data.DurationInSeconds
	result.Expiry = data.Expiry
	result.RemainingTimeInSeconds = data.RemainingTimeInSeconds

	*m = result

	return nil
}

// MarshalJSON marshals this object with a polymorphic type to a JSON structure
func (m TimerTerminationCondition) MarshalJSON() ([]byte, error) {
	var b1, b2, b3 []byte
	var err error
	b1, err = json.Marshal(struct {

		// The number of seconds that the overlay should last/was configured to last.
		// Required: true
		// Minimum: 0
		DurationInSeconds *int64 `json:"durationInSeconds"`

		// [ISO8601 datetime](https://en.wikipedia.org/wiki/ISO_8601). E.g.: `2015-09-28T15:03:20Z` with second precision.
		// Only relevant when receiving an overlay, ignored when overlay is sent to the server.
		//
		// Read Only: true
		// Format: date-time
		Expiry strfmt.DateTime `json:"expiry,omitempty"`

		// The number of seconds that are remaining of the timer overlay at the time that the response is assembled by the server.
		// Minimum: 0
		RemainingTimeInSeconds *int64 `json:"remainingTimeInSeconds,omitempty"`
	}{

		DurationInSeconds: m.DurationInSeconds,

		Expiry: m.Expiry,

		RemainingTimeInSeconds: m.RemainingTimeInSeconds,
	})
	if err != nil {
		return nil, err
	}
	b2, err = json.Marshal(struct {
		ProjectedExpiry strfmt.DateTime `json:"projectedExpiry,omitempty"`

		Type OverlayTerminationConditionType `json:"type"`
	}{

		ProjectedExpiry: m.ProjectedExpiry(),

		Type: m.Type(),
	})
	if err != nil {
		return nil, err
	}

	return swag.ConcatJSON(b1, b2, b3), nil
}

// Validate validates this timer termination condition
func (m *TimerTerminationCondition) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateProjectedExpiry(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDurationInSeconds(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateExpiry(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRemainingTimeInSeconds(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *TimerTerminationCondition) validateProjectedExpiry(formats strfmt.Registry) error {

	if swag.IsZero(m.ProjectedExpiry()) { // not required
		return nil
	}

	if err := validate.FormatOf("projectedExpiry", "body", "date-time", m.ProjectedExpiry().String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *TimerTerminationCondition) validateDurationInSeconds(formats strfmt.Registry) error {

	if err := validate.Required("durationInSeconds", "body", m.DurationInSeconds); err != nil {
		return err
	}

	if err := validate.MinimumInt("durationInSeconds", "body", *m.DurationInSeconds, 0, false); err != nil {
		return err
	}

	return nil
}

func (m *TimerTerminationCondition) validateExpiry(formats strfmt.Registry) error {

	if swag.IsZero(m.Expiry) { // not required
		return nil
	}

	if err := validate.FormatOf("expiry", "body", "date-time", m.Expiry.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *TimerTerminationCondition) validateRemainingTimeInSeconds(formats strfmt.Registry) error {

	if swag.IsZero(m.RemainingTimeInSeconds) { // not required
		return nil
	}

	if err := validate.MinimumInt("remainingTimeInSeconds", "body", *m.RemainingTimeInSeconds, 0, false); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this timer termination condition based on the context it is used
func (m *TimerTerminationCondition) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateProjectedExpiry(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateExpiry(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *TimerTerminationCondition) contextValidateProjectedExpiry(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "projectedExpiry", "body", strfmt.DateTime(m.ProjectedExpiry())); err != nil {
		return err
	}

	return nil
}

func (m *TimerTerminationCondition) contextValidateType(ctx context.Context, formats strfmt.Registry) error {

	if err := m.Type().ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("type")
		}
		return err
	}

	return nil
}

func (m *TimerTerminationCondition) contextValidateExpiry(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "expiry", "body", strfmt.DateTime(m.Expiry)); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *TimerTerminationCondition) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *TimerTerminationCondition) UnmarshalBinary(b []byte) error {
	var res TimerTerminationCondition
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
