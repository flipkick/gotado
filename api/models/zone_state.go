// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"bytes"
	"context"
	"encoding/json"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ZoneState zone state
//
// swagger:model ZoneState
type ZoneState struct {

	// activity data points
	// Required: true
	ActivityDataPoints *ActivityDataPoints `json:"activityDataPoints"`

	// Whether the geolocation is detected (through the geolocations of the app users) or overridden (by "always active" blocks of the block schedule).
	// Required: true
	GeolocationOverride *bool `json:"geolocationOverride"`

	// Link object of current zone connection.
	// Required: true
	Link *Link `json:"link"`

	// The currently active open window for the zone, `null` if none.
	OpenWindow *OpenWindow `json:"openWindow,omitempty"`

	// Indicates is an open window has been detected
	OpenWindowDetected bool `json:"openWindowDetected,omitempty"`

	// The currently active overlay for the zone, `null` if none.
	Overlay *Overlay `json:"overlay,omitempty"`

	// Contains preparation target if tado is preparing for an upcoming mode, otherwise null.
	// Required: true
	Preparation *Preparation `json:"preparation"`

	// sensor data points
	// Required: true
	SensorDataPoints *SensorDataPoints `json:"sensorDataPoints"`

	settingField GenericZoneSetting

	// The current tado mode of the zone.
	// Required: true
	TadoMode *TadoMode `json:"tadoMode"`
}

// Setting gets the setting of this base type
func (m *ZoneState) Setting() GenericZoneSetting {
	return m.settingField
}

// SetSetting sets the setting of this base type
func (m *ZoneState) SetSetting(val GenericZoneSetting) {
	m.settingField = val
}

// UnmarshalJSON unmarshals this object with a polymorphic type from a JSON structure
func (m *ZoneState) UnmarshalJSON(raw []byte) error {
	var data struct {
		ActivityDataPoints *ActivityDataPoints `json:"activityDataPoints"`

		GeolocationOverride *bool `json:"geolocationOverride"`

		Link *Link `json:"link"`

		OpenWindow *OpenWindow `json:"openWindow,omitempty"`

		OpenWindowDetected bool `json:"openWindowDetected,omitempty"`

		Overlay *Overlay `json:"overlay,omitempty"`

		Preparation *Preparation `json:"preparation"`

		SensorDataPoints *SensorDataPoints `json:"sensorDataPoints"`

		Setting json.RawMessage `json:"setting"`

		TadoMode *TadoMode `json:"tadoMode"`
	}
	buf := bytes.NewBuffer(raw)
	dec := json.NewDecoder(buf)
	dec.UseNumber()

	if err := dec.Decode(&data); err != nil {
		return err
	}

	propSetting, err := UnmarshalGenericZoneSetting(bytes.NewBuffer(data.Setting), runtime.JSONConsumer())
	if err != nil && err != io.EOF {
		return err
	}

	var result ZoneState

	// activityDataPoints
	result.ActivityDataPoints = data.ActivityDataPoints

	// geolocationOverride
	result.GeolocationOverride = data.GeolocationOverride

	// link
	result.Link = data.Link

	// openWindow
	result.OpenWindow = data.OpenWindow

	// openWindowDetected
	result.OpenWindowDetected = data.OpenWindowDetected

	// overlay
	result.Overlay = data.Overlay

	// preparation
	result.Preparation = data.Preparation

	// sensorDataPoints
	result.SensorDataPoints = data.SensorDataPoints

	// setting
	result.settingField = propSetting

	// tadoMode
	result.TadoMode = data.TadoMode

	*m = result

	return nil
}

// MarshalJSON marshals this object with a polymorphic type to a JSON structure
func (m ZoneState) MarshalJSON() ([]byte, error) {
	var b1, b2, b3 []byte
	var err error
	b1, err = json.Marshal(struct {
		ActivityDataPoints *ActivityDataPoints `json:"activityDataPoints"`

		GeolocationOverride *bool `json:"geolocationOverride"`

		Link *Link `json:"link"`

		OpenWindow *OpenWindow `json:"openWindow,omitempty"`

		OpenWindowDetected bool `json:"openWindowDetected,omitempty"`

		Overlay *Overlay `json:"overlay,omitempty"`

		Preparation *Preparation `json:"preparation"`

		SensorDataPoints *SensorDataPoints `json:"sensorDataPoints"`

		TadoMode *TadoMode `json:"tadoMode"`
	}{

		ActivityDataPoints: m.ActivityDataPoints,

		GeolocationOverride: m.GeolocationOverride,

		Link: m.Link,

		OpenWindow: m.OpenWindow,

		OpenWindowDetected: m.OpenWindowDetected,

		Overlay: m.Overlay,

		Preparation: m.Preparation,

		SensorDataPoints: m.SensorDataPoints,

		TadoMode: m.TadoMode,
	})
	if err != nil {
		return nil, err
	}
	b2, err = json.Marshal(struct {
		Setting GenericZoneSetting `json:"setting"`
	}{

		Setting: m.settingField,
	})
	if err != nil {
		return nil, err
	}

	return swag.ConcatJSON(b1, b2, b3), nil
}

// Validate validates this zone state
func (m *ZoneState) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateActivityDataPoints(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateGeolocationOverride(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLink(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOpenWindow(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOverlay(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePreparation(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSensorDataPoints(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSetting(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTadoMode(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ZoneState) validateActivityDataPoints(formats strfmt.Registry) error {

	if err := validate.Required("activityDataPoints", "body", m.ActivityDataPoints); err != nil {
		return err
	}

	if m.ActivityDataPoints != nil {
		if err := m.ActivityDataPoints.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("activityDataPoints")
			}
			return err
		}
	}

	return nil
}

func (m *ZoneState) validateGeolocationOverride(formats strfmt.Registry) error {

	if err := validate.Required("geolocationOverride", "body", m.GeolocationOverride); err != nil {
		return err
	}

	return nil
}

func (m *ZoneState) validateLink(formats strfmt.Registry) error {

	if err := validate.Required("link", "body", m.Link); err != nil {
		return err
	}

	if m.Link != nil {
		if err := m.Link.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("link")
			}
			return err
		}
	}

	return nil
}

func (m *ZoneState) validateOpenWindow(formats strfmt.Registry) error {
	if swag.IsZero(m.OpenWindow) { // not required
		return nil
	}

	if m.OpenWindow != nil {
		if err := m.OpenWindow.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("openWindow")
			}
			return err
		}
	}

	return nil
}

func (m *ZoneState) validateOverlay(formats strfmt.Registry) error {
	if swag.IsZero(m.Overlay) { // not required
		return nil
	}

	if m.Overlay != nil {
		if err := m.Overlay.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("overlay")
			}
			return err
		}
	}

	return nil
}

func (m *ZoneState) validatePreparation(formats strfmt.Registry) error {

	if err := validate.Required("preparation", "body", m.Preparation); err != nil {
		return err
	}

	if m.Preparation != nil {
		if err := m.Preparation.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("preparation")
			}
			return err
		}
	}

	return nil
}

func (m *ZoneState) validateSensorDataPoints(formats strfmt.Registry) error {

	if err := validate.Required("sensorDataPoints", "body", m.SensorDataPoints); err != nil {
		return err
	}

	if m.SensorDataPoints != nil {
		if err := m.SensorDataPoints.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("sensorDataPoints")
			}
			return err
		}
	}

	return nil
}

func (m *ZoneState) validateSetting(formats strfmt.Registry) error {

	if err := validate.Required("setting", "body", m.Setting()); err != nil {
		return err
	}

	if err := m.Setting().Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("setting")
		}
		return err
	}

	return nil
}

func (m *ZoneState) validateTadoMode(formats strfmt.Registry) error {

	if err := validate.Required("tadoMode", "body", m.TadoMode); err != nil {
		return err
	}

	if err := validate.Required("tadoMode", "body", m.TadoMode); err != nil {
		return err
	}

	if m.TadoMode != nil {
		if err := m.TadoMode.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("tadoMode")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this zone state based on the context it is used
func (m *ZoneState) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateActivityDataPoints(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateLink(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateOpenWindow(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateOverlay(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePreparation(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSensorDataPoints(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSetting(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTadoMode(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ZoneState) contextValidateActivityDataPoints(ctx context.Context, formats strfmt.Registry) error {

	if m.ActivityDataPoints != nil {
		if err := m.ActivityDataPoints.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("activityDataPoints")
			}
			return err
		}
	}

	return nil
}

func (m *ZoneState) contextValidateLink(ctx context.Context, formats strfmt.Registry) error {

	if m.Link != nil {
		if err := m.Link.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("link")
			}
			return err
		}
	}

	return nil
}

func (m *ZoneState) contextValidateOpenWindow(ctx context.Context, formats strfmt.Registry) error {

	if m.OpenWindow != nil {
		if err := m.OpenWindow.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("openWindow")
			}
			return err
		}
	}

	return nil
}

func (m *ZoneState) contextValidateOverlay(ctx context.Context, formats strfmt.Registry) error {

	if m.Overlay != nil {
		if err := m.Overlay.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("overlay")
			}
			return err
		}
	}

	return nil
}

func (m *ZoneState) contextValidatePreparation(ctx context.Context, formats strfmt.Registry) error {

	if m.Preparation != nil {
		if err := m.Preparation.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("preparation")
			}
			return err
		}
	}

	return nil
}

func (m *ZoneState) contextValidateSensorDataPoints(ctx context.Context, formats strfmt.Registry) error {

	if m.SensorDataPoints != nil {
		if err := m.SensorDataPoints.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("sensorDataPoints")
			}
			return err
		}
	}

	return nil
}

func (m *ZoneState) contextValidateSetting(ctx context.Context, formats strfmt.Registry) error {

	if err := m.Setting().ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("setting")
		}
		return err
	}

	return nil
}

func (m *ZoneState) contextValidateTadoMode(ctx context.Context, formats strfmt.Registry) error {

	if m.TadoMode != nil {
		if err := m.TadoMode.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("tadoMode")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ZoneState) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ZoneState) UnmarshalBinary(b []byte) error {
	var res ZoneState
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
